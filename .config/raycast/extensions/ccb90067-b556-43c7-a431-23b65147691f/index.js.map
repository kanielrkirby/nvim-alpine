{
  "version": 3,
  "sources": ["../src/index.tsx"],
  "sourcesContent": ["import {\n  ActionPanel,\n  List,\n  Action,\n  showToast,\n  Toast,\n  Icon,\n} from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst CLI_PATH = \"/Applications/UTM.app/Contents/MacOS/utmctl\";\n\nconst execPromise = promisify(exec);\n\ninterface VirtualMachine {\n  uuid: string;\n  status: string;\n  name: string;\n}\n\nfunction loadVirtualMachines(stdout: string) {\n  return stdout\n    .split(\"\\n\")\n    .slice(1)\n    .filter(Boolean)\n    .map((item) => {\n      const parts = item.split(\" \").filter(Boolean);\n      return {\n        uuid: parts[0],\n        status: parts[1],\n        name: parts[2],\n      };\n    });\n}\n\nfunction VirtualMachineList() {\n  const [virtualMachines, setVirtualMachines] = useState<VirtualMachine[]>();\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    async function fetch() {\n      try {\n        const { stdout } = await execPromise(`${CLI_PATH} list`);\n        const virtualMachines = loadVirtualMachines(stdout);\n        setVirtualMachines(virtualMachines);\n      } catch (error) {\n        showToast(Toast.Style.Failure, \"Couldn't find virtual machines.\");\n        setVirtualMachines([]);\n      }\n    }\n    fetch();\n    setReload(false);\n  }, [reload]);\n\n  return (\n    <List isLoading={virtualMachines === undefined}>\n      {virtualMachines?.map((virtualMachine) => {\n        const stopped = virtualMachine.status === \"stopped\";\n        const paused = virtualMachine.status === \"paused\";\n        return (\n          <List.Item\n            title={virtualMachine.name}\n            subtitle={virtualMachine.status}\n            key={virtualMachine.uuid}\n            actions={\n              <ActionPanel>\n                <Action\n                  title={`${stopped ? \"Start\" : paused ? \"Resume\" : \"Stop\"}`}\n                  icon={stopped ? Icon.Play : paused ? Icon.Play : Icon.Stop}\n                  onAction={async () => {\n                    await execPromise(\n                      `${CLI_PATH} ${stopped || paused ? \"start\" : \"stop\"} ${\n                        virtualMachine.uuid\n                      }`\n                    );\n                    showToast(\n                      Toast.Style.Success,\n                      `${\n                        stopped ? \"Started\" : paused ? \"Resumed\" : \"Stopped\"\n                      } ${virtualMachine.name} (${virtualMachine.uuid})`\n                    );\n                    setReload(true);\n                  }}\n                />\n                {!(stopped || paused) && (\n                  <Action\n                    title=\"Suspend\"\n                    icon={Icon.Pause}\n                    onAction={async () => {\n                      await execPromise(\n                        `${CLI_PATH} suspend ${virtualMachine.uuid}`\n                      );\n                      showToast(\n                        Toast.Style.Success,\n                        `Suspended ${virtualMachine.name} (${virtualMachine.uuid})`\n                      );\n                      setReload(true);\n                    }}\n                  />\n                )}\n                <Action.CopyToClipboard\n                  content={virtualMachine.uuid}\n                  title=\"Copy UUID\"\n                />\n              </ActionPanel>\n            }\n          />\n        );\n      })}\n    </List>\n  );\n}\n\nexport default function Command() {\n  return <VirtualMachineList />;\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAOO,wBACPC,EAAoC,iBACpCC,EAAqB,yBACrBC,EAA0B,gBAV1BC,EAAA,6BAYMC,EAAW,8CAEXC,KAAc,aAAU,MAAI,EAQlC,SAASC,EAAoBC,EAAgB,CAC3C,OAAOA,EACJ,MAAM;AAAA,CAAI,EACV,MAAM,CAAC,EACP,OAAO,OAAO,EACd,IAAKC,GAAS,CACb,IAAMC,EAAQD,EAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAC5C,MAAO,CACL,KAAMC,EAAM,GACZ,OAAQA,EAAM,GACd,KAAMA,EAAM,EACd,CACF,CAAC,CACL,CAEA,SAASC,GAAqB,CAC5B,GAAM,CAACC,EAAiBC,CAAkB,KAAI,YAA2B,EACnE,CAACC,EAAQC,CAAS,KAAI,YAAS,EAAK,EAC1C,sBAAU,IAAM,CACd,eAAeC,GAAQ,CACrB,GAAI,CACF,GAAM,CAAE,OAAAR,CAAO,EAAI,MAAMF,EAAY,GAAGD,QAAe,EACjDO,EAAkBL,EAAoBC,CAAM,EAClDK,EAAmBD,CAAe,CACpC,MAAE,IACA,aAAU,QAAM,MAAM,QAAS,iCAAiC,EAChEC,EAAmB,CAAC,CAAC,CACvB,CACF,CACAG,EAAM,EACND,EAAU,EAAK,CACjB,EAAG,CAACD,CAAM,CAAC,KAGT,OAAC,QAAK,UAAWF,IAAoB,OAClC,SAAAA,GAAiB,IAAKK,GAAmB,CACxC,IAAMC,EAAUD,EAAe,SAAW,UACpCE,EAASF,EAAe,SAAW,SACzC,SACE,OAAC,OAAK,KAAL,CACC,MAAOA,EAAe,KACtB,SAAUA,EAAe,OAEzB,WACE,QAAC,eACC,oBAAC,UACC,MAAO,GAAGC,EAAU,QAAUC,EAAS,SAAW,SAClD,KAAMD,EAAU,OAAK,KAAOC,EAAS,OAAK,KAAO,OAAK,KACtD,SAAU,SAAY,CACpB,MAAMb,EACJ,GAAGD,KAAYa,GAAWC,EAAS,QAAU,UAC3CF,EAAe,MAEnB,KACA,aACE,QAAM,MAAM,QACZ,GACEC,EAAU,UAAYC,EAAS,UAAY,aACzCF,EAAe,SAASA,EAAe,OAC7C,EACAF,EAAU,EAAI,CAChB,EACF,EACC,EAAEG,GAAWC,OACZ,OAAC,UACC,MAAM,UACN,KAAM,OAAK,MACX,SAAU,SAAY,CACpB,MAAMb,EACJ,GAAGD,aAAoBY,EAAe,MACxC,KACA,aACE,QAAM,MAAM,QACZ,aAAaA,EAAe,SAASA,EAAe,OACtD,EACAF,EAAU,EAAI,CAChB,EACF,KAEF,OAAC,SAAO,gBAAP,CACC,QAASE,EAAe,KACxB,MAAM,YACR,GACF,GAzCGA,EAAe,IA2CtB,CAEJ,CAAC,EACH,CAEJ,CAEe,SAARnB,GAA2B,CAChC,SAAO,OAACa,EAAA,EAAmB,CAC7B",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_child_process", "import_util", "import_jsx_runtime", "CLI_PATH", "execPromise", "loadVirtualMachines", "stdout", "item", "parts", "VirtualMachineList", "virtualMachines", "setVirtualMachines", "reload", "setReload", "fetch", "virtualMachine", "stopped", "paused"]
}
